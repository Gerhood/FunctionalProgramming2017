-- |examples with tuples
examplePair :: (Double, Bool)  -- Double x Bool
examplePair = (3.14, False)

exampleTriple :: (Bool, Int, String) -- Bool x Int x String
exampleTriple = (False, 42, "Answer")

exampleFunction :: (Bool, Int, String) -> Bool
exampleFunction (b, i, s) = not b && length s < i


























































-- |function over lists - examples
summerize :: [String] -> String
summerize []  = "None"
summerize [x] = "Only " ++ x
summerize [x,y] = "Two things: " ++ x ++ " and " ++ y
summerize [_,_,_] = "Three things: ???"
summerize _   = "Several things."   -- wild card pattern




















































-- |double every value in a list
-- doubles [3,6,12] == [6,12,24]
doubles :: [Integer] -> [Integer]
doubles []     = undefined
doubles (x:xs) = undefined




















































-- |apply a function to all elements of a list
map' :: (a -> b) -> ([a] -> [b])
map' f []     = undefined
map' f (x:xs) = undefined




















































-- |doubles using map
doubles' xs = undefined

double :: Integer -> Integer
double x = undefined



















































-- |keep only elements in list that fulfill a predicate
filter' :: (a -> Bool) -> [a] -> [a]
filter' p []     = undefined
filter' p (x:xs) = undefined


















































-- | twice


















































-- |foldr' (predefined)
